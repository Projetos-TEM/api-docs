FORMAT: 1A

# Aplicação TEM Saúde

Documentação de referência da API REST para a implementação da aplicação mobile da Rede TEM.

## URL

A URL base da API depende do ambiente:

<dl>
<dt>Homologação</dt>
<dd>https://qa-api-app.temrede.com.br</dd>
<dt>Produção</dt>
<dd>https://api-app.temrede.com.br</dd>
</dl>

> O endereço de produção só funciona para IP previamente liberado.

## Group Autenticação

### Sobre a autenticação

A não ser nos endpoints especificados, essa API exige autenticação usando o método OAuth 2.0 com
tokens descartáveis, obtidos previamente.

:::note
### Utilizando o token

Em toda requisição feita a endpoints protegidos, será preciso enviar o cabeçalho HTTP `Authorization`
com o token temporário obtido previamente:

```http
Authorization: Bearer <TOKEN>
```
:::

## Token [/api/app/oauth/token]

O endpoint a seguir serve para obter o token de acesso.

### POST

Obtém um token temporário para ser usado na API, esse token deve ser reutilizado até expirar.

Para obter o token, as credenciais devem ser passadas utilizando a autenticação <u>HTTP Basic</u> e configurar o modo de concessão
do token OAuth para `password`.

> As credenciais para obter o token devem ser solicitadas previamente.

+ Request (application/x-www-form-urlencoded)
    + Headers

            Authorization: Basic <CREDENTIALS>
    
    + Body

            grant_type=password&username=<CPF>&password=<PASSWORD>

+ Response 200 (application/json)

        {
            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
            "token_type": "bearer",
            "expires_in": 29999999,
            "scope": "all",
            "jti": "ab6abdb1-4d08-4a9c-9d49-3fdcb1a81611"
        }

+ Response 401 (application/json)

        {
            "status": 401,
            "timestamp": "2018-06-28",
            "error": "Unauthorized",
            "message": "Unauthorized",
            "path": "/api/tim/oauth/token"
        }

## Group Login e Cadastro

A aplicação mobile da TEM deve detectar se o usuário já é um cliente cadastrado ou se é preciso
realizar o cadastro, no caso de ser um cliente elegível.

:::note
### O fluxo de entrada do app

O fluxo inicial do app funciona de forma geral da seguinte forma:

**Detectar o cliente**

1. Na tela inicial, é solicitado que o usuário digite o seu CPF.
2. A aplicação faz uma chamada para `account/cpf` para obter as informações de cadastro do CPF digitado.
3. Se a resposta tiver código HTTP `200`, então vai para o passo **12**, senão vai para o passo **4**.
4. Se a resposta tiver código HTTP `400`, existem 4 possibilidades:
    - O CPF digitado é inválido, nesse caso, volta para o passo **1**.
    - O usuário não é um cliente, nesse caso, o fluxo é encerrado com uma mensagem de erro amigável. ⬤
    - O usuário é um elegível, nesse caso vai para o passo **5**.
    - O usuário já é um cliente registrado, mas não possui senha cadastrada, nesse caso,
      vai para o passo **13**.

**Cadastrar o usuário**

5. É solicitado ao usuário o número de telefone móvel para enviar um SMS com um código de autorização.
6. A aplicação faz uma chamada para `account/confirm-sms` com o CPF e o telefone do usuário, para
   solicitar que o SMS seja enviado. Na resposta dessa chamada, a aplicação irá receber um código de API
   para ser usado em seguida.
7. Normalmente, o app detecta automaticamente o código de SMS recebido pelo aparelho, mas se não foi
   detectado (comum quando o número está em outro dispositivo), o usuário deve digitar o código recebido
   por SMS.
8. A aplicação faz uma chamada para `account/confirm-sms/{apiCode}/{smsCode}` com o código de API e
   o código SMS digitado ou detectado no passo anterior.
9. É solicitado ao usuário os dados pessoais restantes para o cadastro (nome e e-mail) e a senha de acesso ao app.
10. É solicitado ao usuário escolher qual das ofertas de produtos disponíveis irá aderir
    (os produtos ofertados estão no retorno de `account/cpf`).
11. A aplicação faz uma chamada para `account/create/eligible/free` com o código de API, o código de SMS,
    os dados pessoais, a senha e o produto escolhido para a adesão.
12. A aplicação utilizará o CPF e a senha do usuário para obter o [token de acesso](#autenticação-token).
    De posse do _token_, o usuário está logado. ⬤

**Cadastrar a senha**

13. Faz o mesmo processo de confirmação de SMS dos passos **5** a **8**.
14. Quando o usuário já é um cliente, mas ainda não possui senha, existe duas formas da aplicação lidar:
    - O produto do cliente está configurado como baixa segurança, nesse caso, algumas validações não serão
      realizadas: pula para o passo **16**.
    - O produto não possui a flag de baixa segurança, portanto todas as validações serão realizadas.
15. É solicitado ao usuário o número do cartão e a data de nascimento do cliente.
16. ... ⬤
:::

:::warning
### Endpoints semi-abertos

Todos os endpoints usados antes do login são considerados semi-abertos, isto significa que a aplicação
deve enviar no cabeçalho `Api-Token` um token fixo, usualmente configurado em um arquivo externo
acessível pela aplicação.
```http
Api-Token: <API_TOKEN>
```
O valor do `Api-Token` deve ser obtido previamente pelo parceiro.
:::

## Informações de cadastro [/api/app/account/cpf/{cpf}]

O seguinte endpoint serve para obter as informações de cadastro de um certo CPF.

As informações de cadastro serão retornados no objeto do tipo <u>LoginResponse</u>, descrito a seguir.

**LoginResponse (tipo de dados)** <a id="t-LoginResponse"></a>

| Campo        | Tipo    | Descrição                                                                                                                                                                      |
| ------------ | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `canBuy`     | Boolean | Flag que indica que o cliente completou o cadastro, assim está habilitado a fazer [recarga do cartão](#).                                                               |
| `membership` | Array   | <p>Uma lista de objetos <u>Membership</u> com as informações de associação do CPF solicitado. <p>Esse campo só é utilizado quando o usuário ainda não é um cliente cadastrado. |

**Membership (tipo de dados)** <a id="t-Membership"></a>

> A FAZER

| Campo | Tipo | Descrição |
| ----- | ---- | --------- |
|       |      |           |

### GET

#### Descrição

Obtém as informações de cadastro de um certo CPF.

> Endpoint semi-aberto

#### Sobre resposta

Na resposta de sucesso, é retornado um JSON com os seguintes campos:

| Campo            | Tipo   | Descrição                                                                                             |
| ---------------- | ------ | ----------------------------------------------------------------------------------------------------- |
| `status`         | Número | O mesmo código de resposta do HTTP.                                                                   |
| `defaultMessage` | String | A descrição da resposta.                                                                              |
| `body`           | Objeto | Um objeto do tipo [LoginResponse](#t-LoginResponse) com as informações de cadastro do CPF solicitado. |

#### Os códigos de resposta

Esse endpoint pode responder com os seguintes códigos HTTP:

| Código | Descrição                                                                                                                                                                                                |
| ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `200`  | O CPF informado é de um cliente já cadastrado no sistema, podendo fazer login mediante o fornecimento da senha.                                                                                          |
| `400`  | Para erros na requisição, como de sintaxe, campo faltante ou inválido. Esse código também pode indicar que o CPF é de um cliente elegível ao cadastro ou um cliente já cadastrado, mas não possui senha. |

:::note
#### Identificação do estado do cliente

Quando o código de resposta é `400`, é necessário ler o conteúdo do JSON retornado para identificar o estado
do cliente no sistema.

A tabela a seguir descreve o JSON que deve ser retornado:

| Campo            | Tipo   | Descrição                           |
| ---------------- | ------ | ----------------------------------- |
| `status`         | Número | O mesmo código de resposta do HTTP. |
| `defaultMessage` | String | A descrição da resposta.            |
| `error`          | Objeto | As informações do erro retornado.   |

Para identificar o estado do cliente, é preciso ler o campo `error`, que deve conter as seguintes propriedades:

| Campo          | Tipo   | Descrição                                                                                             |
| -------------- | ------ | ----------------------------------------------------------------------------------------------------- |
| `apiErrorCode` | String | Um código de erro da API. Veja os códigos possíveis a seguir.                                         |
| `data`         | Objeto | Um objeto do tipo [LoginResponse](#t-LoginResponse) com as informações de cadastro do CPF solicitado. |

**Códigos de erro da API**

A depender do código retornado, o app seguirá com um comportamento diferente:

| Código de erro                         | Descrição                                 | Comportamento esperado do app                                                                                       |
| -------------------------------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| `INVALID_CPF`                          | CPF digitado inválido.                    | Pedir novamente o CPF do usuário, exibindo um erro de validação.                                                    |
| `CPF_PANEL_DOES_NOT_EXIST`             | Usuário não é um cliente da Rede TEM.     | Exibir uma mensagem de erro amigável ao usuário.                                                                    |
| `CPF_PANEL_EXISTS_AND_HAS_NO_PASSWORD` | Cliente registrado, mas não possui senha. | Deve ser solicitada a senha do usuário de acordo com o [fluxo descrito](#).                                         |
| `CPF_ELIGIBLE`                         | Cliente é um elegível ao cadastro.        | Deve ser solicitado os dados de cadastro do cliente, isso ocorre no [chat](#).                                      |
| `CPF_WITH_CARD_SEMPRE_DO_NOT_EXIST`    | Cliente sem registro no serviço do Sempre | Raramente esse código é retornado, no caso de retornar, o usuário deve ser informado a entrar em contato com o SAC. |
:::

+ Parameters
    + cpf: `42605973883` (number) - O número de CPF do usuário.

+ Request
    + Headers
    
            Api-Token: <API_TOKEN>

+ Response 200 (application/json)

    dsds

    + Body
