FORMAT: 1A

# Login e Cadastro do Usuário (Aplicação TEM Saúde)

Documentação de referência da API REST para a implementação da aplicação mobile da Rede TEM.

## URL

A URL base da API depende do ambiente:

<dl>
<dt>Homologação</dt>
<dd>https://qa-api-app.temrede.com.br</dd>
<dt>Produção</dt>
<dd>https://api-app.temrede.com.br</dd>
</dl>

> O endereço de produção só funciona para IP previamente liberado.

## Group Autenticação

### Sobre a autenticação

A não ser nos endpoints especificados, essa API exige autenticação usando o método OAuth 2.0 com
tokens descartáveis, obtidos previamente.

:::note
### Utilizando o token

Em toda requisição feita a endpoints protegidos, será preciso enviar o cabeçalho HTTP `Authorization`
com o token temporário obtido previamente:

```http
Authorization: Bearer <TOKEN>
```
:::

## Token [/api/app/oauth/token]

O endpoint a seguir serve para obter o token de acesso.

### POST

Obtém um token temporário para ser usado na API, esse token deve ser reutilizado até expirar.

Para obter o token, as credenciais devem ser passadas utilizando a autenticação <u>HTTP Basic</u> e configurar o modo de concessão
do token OAuth para `password`.

> As credenciais para obter o token devem ser solicitadas previamente.

+ Request Obter token (application/x-www-form-urlencoded)
    + Headers

            Authorization: Basic <CREDENTIALS>
    
    + Body

            grant_type=password&username=<CPF>&password=<PASSWORD>

+ Response 200 (application/json)

        {
            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
            "token_type": "bearer",
            "expires_in": 29999999,
            "scope": "all",
            "jti": "ab6abdb1-4d08-4a9c-9d49-3fdcb1a81611"
        }

+ Response 401 (application/json)

        {
            "status": 401,
            "timestamp": "2018-06-28",
            "error": "Unauthorized",
            "message": "Unauthorized",
            "path": "/api/tim/oauth/token"
        }

## Group Login e Cadastro

A aplicação mobile da TEM deve detectar se o usuário já é um cliente cadastrado ou se é preciso
realizar o cadastro, no caso de ser um cliente elegível.

:::note
### O fluxo de entrada do app

O fluxo inicial do app funciona de forma geral da seguinte forma:

**Detectar o cliente**

1. <a id="step-cpf-enter"></a>
   Na tela inicial, é solicitado que o usuário digite o seu CPF.
2. A aplicação faz uma chamada para <code>**[account/cpf]**</code> para obter as informações de cadastro do CPF digitado.
3. Se a resposta tiver código HTTP `200`, então vai para o passo **[24]**, senão vai para o passo **[4]**.
4. <a id="step-cpf-400"></a>
   Se a resposta tiver código HTTP `400`, existem 4 possibilidades:
    - O CPF digitado é inválido, nesse caso, volta para o passo **[1]**.
    - O usuário não é um cliente, nesse caso, o fluxo é encerrado com uma mensagem de erro amigável. ⬤
    - O usuário é um elegível, nesse caso vai para o passo **[5]**.
    - O usuário já é um cliente registrado, mas não possui senha cadastrada, nesse caso, 
      vai para o passo **[16]**.

**Cadastrar o usuário**

5. <a id="step-create-user"></a>
   É solicitado ao usuário escolher qual das ofertas de produtos disponíveis irá aderir
   (os produtos ofertados estão no retorno de <code>**[account/cpf]**</code>).
6. É solicitado ao usuário os dados pessoais (nome, e-mail, data de nascimento, sexo), o número do cartão de saúde
   (se o produto da oferta escolhida é _distributed_ - veja <code>**[account/cpf]**</code>) e os dados de endereço
   (CEP, logradouro, número, complemento, bairro, cidade, estado).
7. Com os dados pessoais preenchidos, a aplicação fará uma chamada para <code>**[account/email]**</code> afim de validar se o
   e-mail informado é válido e já não está cadastrado (com outro CPF).
8. Se o número do cartão de saúde é obrigatório, a aplicação também fará uma chamada para <code>**[cards/{number}/validate]**</code> afim
   de validar se o cartão informado é válido e já não está associado a outro cliente.
9. É solicitado ao usuário o número de telefone móvel para enviar um SMS com um código de autorização.
10. <a id="step-sms-send"></a>
    A aplicação faz uma chamada para <code>**[account/confirm-sms][request-sms]**</code> com o CPF e o telefone do usuário, para
    solicitar que o SMS seja enviado. Na resposta dessa chamada, a aplicação irá receber um código de API
    para ser usado em seguida.
11. Normalmente, o app detecta automaticamente o código de SMS recebido pelo aparelho, mas se não foi
    detectado (comum quando o número está em outro dispositivo), o usuário deve digitar o código recebido
    por SMS.
12. <a id="step-sms-confirm"></a>
    A aplicação faz uma chamada para <code>**[account/confirm-sms/{apiCode}/{smsCode}][confirm-sms]**</code> com o código de API e
    o código SMS digitado ou detectado no passo anterior.
13. É solicitado ao usuário para cadastrar a senha de acesso ao app.
14. A aplicação faz uma chamada para <code>**[account/create/eligible/free][create-user]**</code> com o código de API, o código de SMS,
    os dados pessoais, de endereço, o número do cartão (se requerido), a senha e o produto escolhido para a adesão.
15. No sucesso, o usuário está cadastrado, vai para o passo **[24]**. ⬤

**Cadastrar a senha**

16. <a id="step-password-create"></a>
    Quando o usuário já é um cliente, mas ainda não possui senha, existem duas formas da aplicação lidar:
    - O produto do cliente está configurado como baixa segurança, nesse caso, algumas validações não serão
      realizadas: pula para o passo **[18]**.
    - O produto não possui a flag de baixa segurança, portanto todas as validações serão realizadas.
17. É solicitado ao usuário o número do cartão de saúde (_não solicita em produto de baixa segurança_).
18. <a id="step-password-skip-card"></a>
    É solicitado ao usuário a data de nascimento do cliente.
19. A aplicação faz uma chamada para <code>**[authentication/validate]**</code> para validar os dados digitados com o do cliente já cadastrado.
    - Se a resposta tiver código `200`, então continua o processo.
    - Senão, solicita novamente os dados para o usuário.
20. É solicitado ao usuário o número de telefone móvel para enviar um SMS com um código de autorização.
21. Faz o mesmo processo de confirmação de SMS dos passos **[10]** a **[12]**.
22. A aplicação faz uma chamada para <code>**[authentication/save]**</code> com o código de API, o código de SMS, o CPF, telefone, 
    o número do cartão (se exigido) e a senha.
23. No sucesso, vai para o passo **[24]**.

**Autenticar**

24. <a id="step-token"></a>
    A aplicação utilizará o CPF e a senha do usuário para obter o [token de acesso](#autenticação-token).
    De posse do _token_, o usuário está logado

[1]: #step-cpf-enter
[4]: #step-cpf-400
[5]: #step-create-user
[10]: #step-sms-send
[12]: #step-sms-confirm
[16]: #step-password-create
[18]: #step-password-skip-card
[24]: #step-token
:::

[account/cpf]: #login-e-cadastro-informações-de-cadastro
[account/email]: #login-e-cadastro-validação-do-e-mail
[cards/{number}/validate]: #login-e-cadastro-validação-do-cartão-de-saúde
[request-sms]: #login-e-cadastro-solicita-o-envio-de-sms
[confirm-sms]: #login-e-cadastro-confirmação-do-sms
[create-user]: #login-e-cadastro-cria-um-usuário-elegível
[authentication/validate]: #login-e-cadastro-validar-dados-para-alteração-de-senha
[authentication/save]: #login-e-cadastro-atualizar-a-senha-do-app

:::warning
### Endpoints semi-abertos

Todos os endpoints usados antes do login são considerados semi-abertos, isto significa que a aplicação
deve enviar no cabeçalho `Api-Token` um token fixo, usualmente configurado em um arquivo externo
acessível pela aplicação.

```http
Api-Token: <API_TOKEN>
```

O valor do `Api-Token` deve ser obtido previamente pelo parceiro.
:::

## Informações de cadastro [/api/app/account/cpf/{cpf}]

O seguinte endpoint serve para obter as informações de cadastro de um certo CPF.

### GET

#### Descrição

Obtém as informações de cadastro de um certo CPF.

> Endpoint semi-aberto

#### Sobre a resposta

Na resposta de sucesso, é retornado um JSON com os seguintes campos:

| Campo            | Tipo            | Descrição                                                   |
| ---------------- | --------------- | ----------------------------------------------------------- |
| `status`         | Número          | O mesmo código de resposta do HTTP.                         |
| `defaultMessage` | String          | A descrição da resposta.                                    |
| `body`           | [LoginResponse] | Um objeto com as informações de cadastro do CPF solicitado. |

[LoginResponse]: #datatype-LoginResponse

#### Os códigos de resposta

Esse endpoint pode responder com os seguintes códigos HTTP:

| Código | Descrição                                                                                                                                                                                                |
| ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `200`  | O CPF informado é de um cliente já cadastrado no sistema, podendo fazer login mediante o fornecimento da senha.                                                                                          |
| `400`  | Para erros na requisição, como de sintaxe, campo faltante ou inválido. Esse código também pode indicar que o CPF é de um cliente elegível ao cadastro ou um cliente já cadastrado, mas não possui senha. |

:::note
#### Identificação do estado do cliente

Quando o código de resposta é `400`, é necessário ler o conteúdo do JSON retornado para identificar o estado
do cliente no sistema.

A tabela a seguir descreve o JSON que deve ser retornado:

| Campo            | Tipo   | Descrição                           |
| ---------------- | ------ | ----------------------------------- |
| `status`         | Número | O mesmo código de resposta do HTTP. |
| `defaultMessage` | String | A descrição da resposta.            |
| `error`          | Objeto | As informações do erro retornado.   |

Para identificar o estado do cliente, é preciso ler o campo `error`, que deve conter as seguintes propriedades:

| Campo          | Tipo            | Descrição                                                     |
| -------------- | --------------- | ------------------------------------------------------------- |
| `apiErrorCode` | String          | Um código de erro da API. Veja os códigos possíveis a seguir. |
| `data`         | [LoginResponse] | As informações de cadastro do CPF solicitado.                 |

[LoginResponse]: #datatype-LoginResponse

**Códigos de erro da API**

A depender do código retornado, o app seguirá com um comportamento diferente:

| Código de erro                         | Descrição                                 | Comportamento esperado do app                                                                                       |
| -------------------------------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| `INVALID_CPF`                          | CPF digitado inválido.                    | Pedir novamente o CPF do usuário, exibindo um erro de validação.                                                    |
| `CPF_PANEL_DOES_NOT_EXIST`             | Usuário não é um cliente da Rede TEM.     | Exibir uma mensagem de erro amigável ao usuário.                                                                    |
| `CPF_PANEL_EXISTS_AND_HAS_NO_PASSWORD` | Cliente registrado, mas não possui senha. | Deve ser solicitada a senha do usuário de acordo com o [fluxo descrito](#login-e-cadastro).                         |
| `CPF_ELIGIBLE`                         | Cliente é um elegível ao cadastro.        | Deve ser solicitado que o usuário escolha uma oferta e forneça os dados de cadastro para realizar a adesão.         |
| `CPF_WITH_CARD_SEMPRE_DO_NOT_EXIST`    | Cliente sem registro no serviço do Sempre | Raramente esse código é retornado, no caso de retornar, o usuário deve ser informado a entrar em contato com o SAC. |
:::

+ Parameters
    + cpf: `42605973883` (number) - O número de CPF do usuário.

+ Request Consulta CPF
    + Headers
    
            Api-Token: <API_TOKEN>

+ Response 200 (application/json)

    > Cliente cadastrado

    + Body

            {
                "status": 200,
                "defaultMessage": "Retorna dados do cliente se CPF for válido e existe cartão relacionado no sempre",
                "body": {
                    "status": 200,
                    "message": "Cliente encontrado",
                    "canBuy": true
                }
            }

+ Response 400 (application/json)

    > Cliente não cadastrado

    + Body

            {
                "status": 400,
                "defaultMessage": "Cpf elegível para cadastro",
                "error": {
                    "exceptionLogCode": "20180910001936900",
                    "errorType": "class br.com.meutem.api.exceptionhandler.BusinessException",
                    "userMessage": "Cpf elegível para cadastro",
                    "apiErrorCode": "CPF_ELIGIBLE",
                    "data": [
                        {
                            "status": 404,
                            "message": "Cliente não encontrado",
                            "canBuy": false,
                            "membership": [
                                {
                                    "name": "Sarah da Conceição",
                                    "isFree": true,
                                    "isDistributed": false,
                                    "isGenerated": true,
                                    "channel_id": "74",
                                    "channel_name": "REDE TEM",
                                    "card_src": "https://s3.amazonaws.com/media.meutem/landing_pages_logos/99999999.png",
                                    "benefits": [
                                        {
                                            "icon": "https://loja.meutem.com.br/assets/images/ico-ben-especialidades.png",
                                            "text": "Consultas a partir de R$ 70 em mais de 4 mil clínicas, consultórios e laboratórios."
                                        }
                                    ],
                                    "products": [
                                        {
                                            "id": 1000,
                                            "name": "REDE SAÚDE TEM COMPLETO",
                                            "benefits": [
                                                {
                                                    "icon": "https://loja.meutem.com.br/assets/images/ico-ben-especialidades.png",
                                                    "text": "Consultas a partir de R$ 70 em mais de 4 mil clínicas, consultórios e laboratórios."
                                                }
                                            ],
                                            "value": 0.0,
                                            "cycle": "",
                                            "isFree": true,
                                            "isDistributed": false,
                                            "isGenerated": true,
                                            "onix_code": "9185",
                                            "variable_tax": 0.0,
                                            "has_omt": true,
                                            "has_aggregates": false,
                                            "has_capitalization": false,
                                            "has_drugstores": false,
                                            "has_odonto": false,
                                            "has_family": false,
                                            "card_title": "",
                                            "card_src": "",
                                            "payment_method": "",
                                            "slip_tax": "",
                                            "is_active": false,
                                            "date_start_validity": "2018-09-09",
                                            "date_end_validity": "2018-10-09",
                                            "is_third_party": false,
                                            "has_low_security": false
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }

## Validação do e-mail [/api/app/account/email{?email}]

### GET

> Endpoint semi-aberto

+ Parameters
    + `email`: `joao@exemplo.com` (string) - O endereço de e-mail completo.

+ Request Validar e-mail (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Verifica se o email passado existe nas bases",
            "body": {
                "emailSempre": true,
                "emailPainel": true
            }
        }

## Validação do cartão de saúde [/api/app/cards/{number}/validate{?cvv}]

### GET

> Endpoint semi-aberto

+ Parameters
    + `number`: `6064070025032400` (number) - O número do cartão de saúde.
    + `cvv`: `123` (number) - O código de segurança do cartão de saúde.

+ Request Validar cartão (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

+ Response 200 (application/json)

        {
            "status": 200,
            "message": "O cartão informado é válido",
            "body": {
                "id": 250324,
                "status": "Comercialização",
                "statusCode": 6,
                "number": "6064070025032400",
                "cvv": "123",
                "via": "1",
                "validityDate": null,
                "expireDate": "2023-09-20T20:53:47",
                "insertDate": "2018-09-21T20:53:47",
                "deletedAt": null,
                "associationStartDate": null,
                "acquisitionDate": "2018-09-21T20:53:47",
                "balance": 0,
                "emitter": "606407",
                "client": null,
                "product": {
                    "id": 257,
                    "onix_code": "1234",
                    "card_title": "PRODUTO TEM",
                    "benefits": [
                        {
                        "icon": "https://qa-loja.meutem.com.br/assets/images/clients/sidneyoliveira/ico-ben-especialidades.png",
                        "text": "Consultas a partir de R$ 70 em mais de 4 mil clínicas, consultórios e laboratórios."
                        },
                        {
                        "icon": "https://qa-loja.meutem.com.br/assets/images/clients/sidneyoliveira/ico-ben-dentistas.png",
                        "text": "Atendimento odontológico para procedimentos e exames."
                        },
                        {
                        "icon": "https://qa-loja.meutem.com.br/assets/images/clients/sidneyoliveira/ico-ben-exames.png",
                        "text": "Consultas agendadas em até 10 dias."
                        },
                        {
                        "icon": "https://qa-loja.meutem.com.br/assets/images/clients/sidneyoliveira/ico-radio-family.png",
                        "text": "Plano familiar. Isso significa que poderá agendar atendimentos para você, seu cônjuge (marido/esposa) e filhos até 21 anos."
                        },
                        {
                        "icon": "https://qa-loja.meutem.com.br/assets/images/clients/sidneyoliveira/ico-ben-family_funeral.png",
                        "text": "Funeral familiar."
                        },
                        {
                        "icon": "https://qa-loja.meutem.com.br/assets/images/clients/sidneyoliveira/ico-ben-health_tips.png",
                        "text": "Dicas de saúde."
                        }
                    ]
                }
            }
        }

+ Response 400 (application/json)

    > Caso o cartão já esteja associado a um cliente!
    
    + Body

            {
                "status": 400,
                "message": "Cartão informado já está ativado!"
            }

+ Response 403 (application/json)

    > Caso o código de segurança seja inválido!

    + Body

            {
                "status": 403,
                "message": "O código validador não confere com o cartão informado"
            }

## Solicita o envio de SMS [/api/app/account/confirm-sms]

### POST

> Endpoint semi-aberto

+ Request Solicitar SMS (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>
    
    + Body

            {
                "cpf": "42605973883",
                "telephone": "3174002975"
            }

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Envia um SMS para o celular cadastrado",
            "body": {
                "apiCode": 861,
                "timeOut": 100,
                "startPosition": 22,
                "phoneNumber": "3174002975",
                "smsCodeLength": 6
            }
        }

## Confirmação do SMS [/api/app/account/confirm-sms/{apiCode}/{smsCode}]

### GET

> Endpoint semi-aberto

+ Parameters
    + `apiCode`: 861 (number) - O código da API recebido pelo app ao solicitar o envio do SMS.
    + `smsCode`: 149754 (number) - O código de SMS recebido pelo cliente.

+ Request Confirmar SMS (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Verifica código de confirmação de número",
            "body": "Número de celular confirmado com sucesso"
        }

## Cria um usuário elegível [/api/app/account/create/eligible/free]

### POST

> Endpoint semi-aberto

+ Request Criar usuário (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

    + Body

            {
                "apiCode": 861,
                "smsCode": "149754",
                "cpf": "426.059.738-83",
                "name": "João da Silva",
                "gender": "M",
                "birthdate": "1944-01-12",
                "telephone": "3174002975",
                "password": "zhahj8Ae",
                "cardNumber": "6064070019728919",
                "cardValidator": "233",
                "channelId": 81,
                "idProduct": 257,
                "postalCode": "49035-650",
                "address": "Rua da Paz",
                "addressNumber": "1770",
                "complement": "Casa",
                "neighborhood": "SUL DA ALMA",
                "city": "Aracaju",
                "state": "SE",
            }

+ Response 200 (application/json)

    + Body

            {
                "status": 200,
                "defaultMessage": "Retorna dados do cliente elegível Free que foi criado",
                "body": {
                    "status": 200,
                    "message": "Cliente encontrado",
                    "client": {
                        "id": 121994,
                        "birthdate": "1973-06-18",
                        "cpf": "426.059.738-83",
                        "telephone": "(79) 99110-2728",
                        "hasAccount": true,
                        "product": {
                            "id": 325,
                            "name": "CONTA FLEX - PLUS AP - POLIDOC TIMES",
                            "onix_code": "5038",
                            "variable_tax": "0.00",
                            "slip_tax": "0.00",
                            "has_omt": true,
                            "has_aggregates": false,
                            "has_capitalization": false,
                            "has_drugstores": true,
                            "has_odonto": false,
                            "has_family": true,
                            "card_title": null,
                            "is_active": true,
                            "date_start_validity": "2019-01-10",
                            "date_end_validity": null,
                            "has_low_security": false,
                            "hasInsurance": true
                        },
                        "card": {
                            "number": "6064070174258511"
                        }
                    },
                    "membership": null
                }
            }

## Validar dados para criar senha [/api/app/authentication/validate]

### POST

> Endpoint semi-aberto

+ Request Validar (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

    + Body

            {
                "cpf": "42605973883",
                "cardNumber": "6064070019728919",
                "birthdate": "1944-01-12"
            }

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Valida dados do cliente",
            "body": "Validação realizada com sucesso"
        }

## Criar a senha do app [/api/app/authentication/save]

### POST

> Endpoint semi-aberto

Cria uma senha para o acesso ao app: utilizado quando a senha do usuário não existe.

+ Request  (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

    + Body

            {
                "apiCode": 258,
                "smsCode": "265897",
                "cpf": "42605973883",
                "telephone": "3174002975",
                "cardNumber": "6064070019728919",
                "birthdate": "1944-01-12",
                "password": "zhahj8Ae"
            }

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Salva a senha do cliente",
            "body": {
                "id": 11636,
                "name": null,
                "email": null,
                "linkPhoto": "http://qa-loja.meutem.com.br/assets/images/UsuarioSemFoto.png",
                "hasAccount": true,
                "cardNumber": "6064070019728919",
                "useTermLink": null,
                "ccv": null,
                "emitter": null,
                "copy": null,
                "cardLink": null,
                "cpf": "426.059.738-83"
            }
        }

## Group Gerenciamento da senha

### Esqueci a Senha [/api/app/account/forgot-password]

#### POST

> Endpoint semi-aberto

Solicita um pedido de recuperação de senha.

Ao chamar esse endpoint, uma mensagem de SMS será enviado com um código para autenticar.

+ Request  (application/json)
    + Headers

            Api-Token: <API_TOKEN>

    + Body

            {
                "cpf": "42605973883",
                "telephone": "3174002975"
            }

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Envia um SMS para o celular cadastrado",
            "body": {
                "apiCode": 8386,
                "timeOut": 100,
                "startPosition": 21,
                "phoneNumber": "3174002975",
                "smsCodeLength": 6
            }
        }

### Criar nova senha esquecida [/api/app/authentication/save-password]

### POST

> Endpoint semi-aberto

Salva uma nova senha: esse endpoint é utilizado após o pedido de recuperação de senha.

+ Request  (application/json)
    + Headers
    
            Api-Token: <API_TOKEN>

    + Body

            {
                "apiCode": 258,
                "smsCode": "265897",
                "cpf": "42605973883",
                "telephone": "3174002975",
                "cardNumber": "6064070019728919",
                "birthdate": "1944-01-12",
                "password": "zhahj8Ae"
            }

+ Response 200 (application/json)

        {
            "status": 200,
            "defaultMessage": "Salva a senha do cliente",
            "body": {
                "id": 11636,
                "name": null,
                "email": null,
                "linkPhoto": "http://qa-loja.meutem.com.br/assets/images/UsuarioSemFoto.png",
                "hasAccount": true,
                "cardNumber": "6064070019728919",
                "useTermLink": null,
                "ccv": null,
                "emitter": null,
                "copy": null,
                "cardLink": null,
                "cpf": "426.059.738-83"
            }
        }

## Group Tipos de dados

#### LoginResponse <a id="datatype-LoginResponse"></a>

| Campo        | Tipo                | Descrição                                                                                                                                                 |
| ------------ | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `canBuy`     | Boolean             | Flag que indica que o cliente completou o cadastro, assim está habilitado a fazer [recarga do cartão](#).                                                 |
| `membership` | Array[[Membership]] | <p>Uma lista de objetos com informações de associação do CPF solicitado. <p>Esse campo só é utilizado quando o usuário ainda não é um cliente cadastrado. |

#### Membership <a id="datatype-Membership"></a>

| Campo          | Tipo             | Descrição                                                                                           |
| -------------- | ---------------- | --------------------------------------------------------------------------------------------------- |
| `name`         | String           | O nome do cliente encontrado.                                                                       |
| `channel_id`   | String           | O identificador único do canal dessa associação.                                                    |
| `channel_name` | String           | Campo informativo com o nome do canal.                                                              |
| `products`     | Array[[Product]] | <p>Uma lista de produtos disponíveis para adesão. <p>O usuário só pode aderir a um desses produtos. |

#### Product <a id="datatype-Product"></a>

| Campo           | Tipo             | Descrição                                                                                                             |
| --------------- | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
| `card_src`      | String           | URL com a imagem do cartão gerado por esse produto.                                                                   |
| `isFree`        | Boolean          | Flag que indica se esse produto é grátis.                                                                             |
| `isDistributed` | Boolean          | Flag que indica se o cartão desse produto é entregue em casa ou é virtual.                                            |
| `isGenerated`   | Boolean          | Flag que indica se o cartão desse produto é gerado no ato da adesão ou o cliente já deve ter um cartão anteriormente. |
| `benefits`      | Array[[Benefit]] | Uma lista com os benefícios oferecidos por esse produto.                                                              |

#### Benefit <a id="datatype-Benefit"></a>

| Campo  | Tipo   | Descrição                                                    |
| ------ | ------ | ------------------------------------------------------------ |
| `icon` | String | URL com a imagem para dar uma indicação visual do benefício. |
| `text` | String | Descrição textual do que o benefício oferece.                |

[Membership]: #datatype-Membership
[Product]: #datatype-Product
[Benefit]: #datatype-Benefit
